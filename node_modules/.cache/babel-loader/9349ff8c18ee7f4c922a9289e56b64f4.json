{"ast":null,"code":"var _jsxFileName = \"/Users/emilymarinaro/Documents/UCLA /projects/spotify_for_funsies/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Dropdown from './components/Dropdown/dropdown';\nimport TrackListContainer from './components/TrackListContainer/trackListContainer';\nimport TrackInfo from './components/TrackInfo/trackinfo';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  REACT_APP_CLIENT_SEC,\n  REACT_APP_CLIENT_ID\n} = process.env;\n\nfunction App() {\n  _s();\n\n  const clientSecret = REACT_APP_CLIENT_SEC;\n  const clientId = REACT_APP_CLIENT_ID;\n  const [token, setToken] = useState('');\n  const [genres, setGenres] = useState({\n    selectedGenre: '',\n    listOfGenresFromAPI: []\n  });\n  const [playlist, setPlaylist] = useState({\n    selectedPlaylist: '',\n    listOfPlaylistFromAPI: []\n  });\n  const [tracks, setTracks] = useState({\n    selectedTrack: '',\n    listOfTracksFromAPI: []\n  });\n  const [trackDetail, setTrackDetail] = useState(null);\n  useEffect(() => {\n    axios('https://accounts.spotify.com/api/token', {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: 'Basic ' + btoa(clientId + ':' + clientSecret)\n      },\n      data: 'grant_type=client_credentials',\n      method: 'POST'\n    }).then(tokenResponse => {\n      setToken(tokenResponse.data.access_token);\n      axios('https://api.spotify.com/v1/browse/categories?locale=sv_US', {\n        method: 'GET',\n        headers: {\n          Authorization: 'Bearer ' + tokenResponse.data.access_token\n        }\n      }).then(genreResponse => {\n        setGenres({\n          selectedGenre: genres.selectedGenre,\n          listOfGenresFromAPI: genreResponse.data.categories.items\n        });\n      });\n    });\n  }, [genres.selectedGenre, clientId, clientSecret]);\n\n  const genreChanged = val => {\n    setGenres({\n      selectedGenre: val,\n      listOfGenresFromAPI: genres.listOfGenresFromAPI\n    });\n    axios(`https://api.spotify.com/v1/browse/categories/${val}/playlists?limit=10`, {\n      method: 'GET',\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    }).then(playlistResponse => {\n      setPlaylist({\n        selectedPlaylist: playlist.selectedPlaylist,\n        listOfPlaylistFromAPI: playlistResponse.data.playlists.items\n      });\n    });\n    console.log(val);\n  };\n\n  const playlistChanged = val => {\n    console.log(val);\n    setPlaylist({\n      selectedPlaylist: val,\n      listOfPlaylistFromAPI: playlist.listOfPlaylistFromAPI\n    });\n  };\n\n  const buttonClicked = e => {\n    e.preventDefault();\n    axios(`https://api.spotify.com/v1/playlists/${playlist.selectedPlaylist}/tracks?limit=10`, {\n      method: 'GET',\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    }).then(tracksResponse => {\n      setTracks({\n        selectedTrack: tracks.selectedTrack,\n        listOfTracksFromAPI: tracksResponse.data.items\n      });\n    });\n  }; // useEffect(() => {\n  //   //get initial token in order to access endpoints\n  //   axios('https://accounts.spotify.com/api/token', {\n  //     headers: {\n  //       'Content-Type': 'application/x-www-form-urlencoded',\n  //       Authorization: 'Basic ' + btoa(clientId + ':' + clientSecret),\n  //     },\n  //     data: 'grant_type=client_credentials',\n  //     method: 'POST',\n  //   }).then((tokenResponse) => {\n  //     console.log(tokenResponse.data.access_token);\n  //     setToken(tokenResponse.data.access_token);\n  //     //get genres\n  //     axios('https://api.spotify.com/v1/browse/categories?locale=sv_US', {\n  //       method: 'GET',\n  //       headers: { Authorization: 'Bearer ' + tokenResponse.data.access_token },\n  //     }).then((genreResponse) => {\n  //       setGenres({\n  //         selectedGenre: genres.selectedGenre,\n  //         listOfGenresFromAPI: genreResponse.data.categories.items,\n  //       });\n  //     });\n  //   });\n  // }, [genres.selectedGenre, clientId, clientSecret]);\n  // const genreChanged = (val) => {\n  //   setGenres({\n  //     selectedGenre: val,\n  //     listOfGenresFromAPI: genres.listOfGenresFromAPI,\n  //   });\n  //   //get playlists\n  //   axios(\n  //     `https://api.spotify.com/v1/browse/categories/${val}/playlists?limit=10`,\n  //     {\n  //       method: 'GET',\n  //       headers: { Authorization: 'Bearer ' + token },\n  //     }\n  //   ).then((playlistResponse) => {\n  //     setPlaylist({\n  //       selectedPlaylist: playlist.selectedPlaylist,\n  //       listOfPlaylistFromAPI: playlistResponse.data.playlists.items,\n  //     });\n  //   });\n  // };\n  // const playlistChanged = (val) => {\n  //   setPlaylist({\n  //     selectedPlayList: val,\n  //     listOfPlaylistFromAPI: playlist.listOfPlaylistFromAPI,\n  //   });\n  // };\n  // const buttonClicked = (e) => {\n  //   e.preventDefault();\n  //   axios(\n  //     `https://api.spotify.com/v1/playlists/${playlist.selectedPlaylist}/tracks?limit=10`,\n  //     {\n  //       method: 'GET',\n  //       headers: {\n  //         Authorization: 'Bearer ' + token,\n  //       },\n  //     }\n  //   ).then((tracksResponse) => {\n  //     setTracks({\n  //       selectedTrack: tracks.selectedTrack,\n  //       listOfTracksFromAPI: tracksResponse.data.items,\n  //     });\n  //   });\n  // };\n\n\n  const listboxClicked = val => {\n    const currentTracks = [...tracks.listOfTracksFromAPI];\n    const trackInfo = currentTracks.filter(t => t.track.id === val);\n    setTrackDetail(trackInfo[0].track);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: buttonClicked,\n      children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n        options: genres.listOfGenresFromAPI,\n        selectedValue: genres.selectedGenre,\n        changed: genreChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n        options: playlist.listOfPlaylistFromAPI,\n        selectedValue: playlist.selectedPlaylist,\n        changed: playlistChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TrackListContainer, {\n        items: tracks.listOfTracksFromAPI,\n        clicked: listboxClicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), trackDetail && /*#__PURE__*/_jsxDEV(TrackInfo, { ...trackDetail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"de/AjB79spiAoXQpRbXgUlGH064=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/emilymarinaro/Documents/UCLA /projects/spotify_for_funsies/client/src/App.js"],"names":["React","useState","useEffect","Dropdown","TrackListContainer","TrackInfo","axios","REACT_APP_CLIENT_SEC","REACT_APP_CLIENT_ID","process","env","App","clientSecret","clientId","token","setToken","genres","setGenres","selectedGenre","listOfGenresFromAPI","playlist","setPlaylist","selectedPlaylist","listOfPlaylistFromAPI","tracks","setTracks","selectedTrack","listOfTracksFromAPI","trackDetail","setTrackDetail","headers","Authorization","btoa","data","method","then","tokenResponse","access_token","genreResponse","categories","items","genreChanged","val","playlistResponse","playlists","console","log","playlistChanged","buttonClicked","e","preventDefault","tracksResponse","listboxClicked","currentTracks","trackInfo","filter","t","track","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Dropdown from './components/Dropdown/dropdown';\nimport TrackListContainer from './components/TrackListContainer/trackListContainer';\nimport TrackInfo from './components/TrackInfo/trackinfo';\nimport axios from 'axios';\nimport './App.css';\nconst { REACT_APP_CLIENT_SEC, REACT_APP_CLIENT_ID } = process.env;\n\nfunction App() {\n  const clientSecret = REACT_APP_CLIENT_SEC;\n  const clientId = REACT_APP_CLIENT_ID;\n\n  const [token, setToken] = useState('');\n  const [genres, setGenres] = useState({\n    selectedGenre: '',\n    listOfGenresFromAPI: [],\n  });\n  const [playlist, setPlaylist] = useState({\n    selectedPlaylist: '',\n    listOfPlaylistFromAPI: [],\n  });\n  const [tracks, setTracks] = useState({\n    selectedTrack: '',\n    listOfTracksFromAPI: [],\n  });\n\n  const [trackDetail, setTrackDetail] = useState(null);\n  useEffect(() => {\n    axios('https://accounts.spotify.com/api/token', {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: 'Basic ' + btoa(clientId + ':' + clientSecret),\n      },\n      data: 'grant_type=client_credentials',\n      method: 'POST',\n    }).then((tokenResponse) => {\n      setToken(tokenResponse.data.access_token);\n\n      axios('https://api.spotify.com/v1/browse/categories?locale=sv_US', {\n        method: 'GET',\n        headers: { Authorization: 'Bearer ' + tokenResponse.data.access_token },\n      }).then((genreResponse) => {\n        setGenres({\n          selectedGenre: genres.selectedGenre,\n          listOfGenresFromAPI: genreResponse.data.categories.items,\n        });\n      });\n    });\n  }, [genres.selectedGenre, clientId, clientSecret]);\n\n  const genreChanged = (val) => {\n    setGenres({\n      selectedGenre: val,\n      listOfGenresFromAPI: genres.listOfGenresFromAPI,\n    });\n\n    axios(\n      `https://api.spotify.com/v1/browse/categories/${val}/playlists?limit=10`,\n      {\n        method: 'GET',\n        headers: { Authorization: 'Bearer ' + token },\n      }\n    ).then((playlistResponse) => {\n      setPlaylist({\n        selectedPlaylist: playlist.selectedPlaylist,\n        listOfPlaylistFromAPI: playlistResponse.data.playlists.items,\n      });\n    });\n\n    console.log(val);\n  };\n\n  const playlistChanged = (val) => {\n    console.log(val);\n    setPlaylist({\n      selectedPlaylist: val,\n      listOfPlaylistFromAPI: playlist.listOfPlaylistFromAPI,\n    });\n  };\n\n  const buttonClicked = (e) => {\n    e.preventDefault();\n\n    axios(\n      `https://api.spotify.com/v1/playlists/${playlist.selectedPlaylist}/tracks?limit=10`,\n      {\n        method: 'GET',\n        headers: {\n          Authorization: 'Bearer ' + token,\n        },\n      }\n    ).then((tracksResponse) => {\n      setTracks({\n        selectedTrack: tracks.selectedTrack,\n        listOfTracksFromAPI: tracksResponse.data.items,\n      });\n    });\n  };\n\n  // useEffect(() => {\n  //   //get initial token in order to access endpoints\n  //   axios('https://accounts.spotify.com/api/token', {\n  //     headers: {\n  //       'Content-Type': 'application/x-www-form-urlencoded',\n  //       Authorization: 'Basic ' + btoa(clientId + ':' + clientSecret),\n  //     },\n  //     data: 'grant_type=client_credentials',\n  //     method: 'POST',\n  //   }).then((tokenResponse) => {\n  //     console.log(tokenResponse.data.access_token);\n  //     setToken(tokenResponse.data.access_token);\n  //     //get genres\n  //     axios('https://api.spotify.com/v1/browse/categories?locale=sv_US', {\n  //       method: 'GET',\n  //       headers: { Authorization: 'Bearer ' + tokenResponse.data.access_token },\n  //     }).then((genreResponse) => {\n  //       setGenres({\n  //         selectedGenre: genres.selectedGenre,\n  //         listOfGenresFromAPI: genreResponse.data.categories.items,\n  //       });\n  //     });\n  //   });\n  // }, [genres.selectedGenre, clientId, clientSecret]);\n\n  // const genreChanged = (val) => {\n  //   setGenres({\n  //     selectedGenre: val,\n  //     listOfGenresFromAPI: genres.listOfGenresFromAPI,\n  //   });\n\n  //   //get playlists\n  //   axios(\n  //     `https://api.spotify.com/v1/browse/categories/${val}/playlists?limit=10`,\n  //     {\n  //       method: 'GET',\n  //       headers: { Authorization: 'Bearer ' + token },\n  //     }\n  //   ).then((playlistResponse) => {\n  //     setPlaylist({\n  //       selectedPlaylist: playlist.selectedPlaylist,\n  //       listOfPlaylistFromAPI: playlistResponse.data.playlists.items,\n  //     });\n  //   });\n  // };\n\n  // const playlistChanged = (val) => {\n  //   setPlaylist({\n  //     selectedPlayList: val,\n  //     listOfPlaylistFromAPI: playlist.listOfPlaylistFromAPI,\n  //   });\n  // };\n\n  // const buttonClicked = (e) => {\n  //   e.preventDefault();\n\n  //   axios(\n  //     `https://api.spotify.com/v1/playlists/${playlist.selectedPlaylist}/tracks?limit=10`,\n  //     {\n  //       method: 'GET',\n  //       headers: {\n  //         Authorization: 'Bearer ' + token,\n  //       },\n  //     }\n  //   ).then((tracksResponse) => {\n  //     setTracks({\n  //       selectedTrack: tracks.selectedTrack,\n  //       listOfTracksFromAPI: tracksResponse.data.items,\n  //     });\n  //   });\n  // };\n\n  const listboxClicked = (val) => {\n    const currentTracks = [...tracks.listOfTracksFromAPI];\n\n    const trackInfo = currentTracks.filter((t) => t.track.id === val);\n\n    setTrackDetail(trackInfo[0].track);\n  };\n\n  return (\n    <div className='App'>\n      <form onSubmit={buttonClicked}>\n        <Dropdown\n          options={genres.listOfGenresFromAPI}\n          selectedValue={genres.selectedGenre}\n          changed={genreChanged}\n        />\n        <Dropdown\n          options={playlist.listOfPlaylistFromAPI}\n          selectedValue={playlist.selectedPlaylist}\n          changed={playlistChanged}\n        />\n        <button type='submit'>Search</button>\n        <TrackListContainer\n          items={tracks.listOfTracksFromAPI}\n          clicked={listboxClicked}\n        />\n        {trackDetail && <TrackInfo {...trackDetail} />}\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}