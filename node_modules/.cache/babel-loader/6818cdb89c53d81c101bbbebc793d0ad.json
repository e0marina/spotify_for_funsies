{"ast":null,"code":"var _jsxFileName = \"/Users/emilymarinaro/Documents/UCLA /projects/spotify_for_funsies/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Dropdown from './components/Dropdown/dropdown';\nimport TrackListContainer from './components/TrackListContainer/trackListContainer';\nimport TrackInfo from './components/TrackInfo/trackinfo';\nimport axios from 'axios';\nimport './App.css'; //const { REACT_APP_CLIENT_SEC, REACT_APP_CLIENT_ID } = process.env;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // const data = [\n  //   { value: 1, name: 'A' },\n  //   { value: 2, name: 'B' },\n  //   { value: 3, name: 'C' },\n  // ];\n  const clientSecret = 'f08b7f2916e0478596e57ec0f16f4b0a';\n  const clientId = 'f9b121e7380a482f966c1dbb273db9e3';\n  const [token, setToken] = useState('');\n  const [genres, setGenres] = useState({\n    selectedGenre: '',\n    listOfGenresFromAPI: []\n  });\n  const [playlist, setPlaylist] = useState({\n    selectedPlaylist: '',\n    listOfPlaylistFromAPI: []\n  });\n  const [tracks, setTracks] = useState({\n    selectedTrack: '',\n    listOfTracksFromAPI: []\n  });\n  const [trackDetail, setTrackDetail] = useState(null);\n  useEffect(() => {\n    //get initial token in order to access endpoints\n    axios('https://accounts.spotify.com/api/token', {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: 'Basic ' + btoa(clientId + ':' + clientSecret)\n      },\n      data: 'grant_type=client_credentials',\n      method: 'POST'\n    }).then(tokenResponse => {\n      console.log(tokenResponse.data.access_token);\n      setToken(tokenResponse.data.access_token); //get genres\n\n      axios('https://api.spotify.com/v1/browse/categories?locale=sv_US', {\n        method: 'GET',\n        headers: {\n          Authorization: 'Bearer ' + tokenResponse.data.access_token\n        }\n      }).then(genreResponse => {\n        setGenres({\n          selectedGenre: genres.selectedGenre,\n          listOfGenresFromAPI: genreResponse.data.categories.items\n        });\n      });\n    });\n  }, [genres.selectedGenre, clientId, clientSecret]);\n\n  const genreChanged = val => {\n    setGenres({\n      selectedGenre: val,\n      listOfGenresFromAPI: genres.listOfGenresFromAPI\n    }); //get playlists\n\n    axios(`https://api.spotify.com/v1/browse/categories/${val}/playlists?limit=10`, {\n      method: 'GET',\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    }).then(playlistResponse => {\n      setPlaylist({\n        selectedPlaylist: playlist.selectedPlaylist,\n        listOfPlaylistFromAPI: playlistResponse.data.playlists.items\n      });\n    });\n  };\n\n  const playlistChanged = val => {\n    setPlaylist({\n      selectedPlayList: val,\n      listOfPlaylistFromAPI: playlist.listOfPlaylistFromAPI\n    });\n  };\n\n  const buttonClicked = e => {\n    e.preventDefault();\n    axios(`https://api.spotify.com/v1/playlists/${playlist.selectedPlaylist}/tracks?limit=10`, {\n      method: 'GET',\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    }).then(tracksResponse => {\n      setTracks({\n        selectedTrack: tracks.selectedTrack,\n        listOfTracksFromAPI: tracksResponse.data.items\n      });\n    });\n  };\n\n  const listboxClicked = val => {\n    const currentTracks = [...tracks.listOfTracksFromAPI];\n    const trackInfo = currentTracks.filter(t => t.track.id === val);\n    setTrackDetail(trackInfo[0].track);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: buttonClicked,\n      children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n        options: genres.listOfGenresFromAPI,\n        selectedValue: genres.selectedGenre,\n        changed: genreChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n        options: playlist.listOfPlaylistFromAPI,\n        selectedValue: playlist.selectedPlaylist,\n        changed: playlistChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TrackListContainer, {\n        items: tracks.listOfTracksFromAPI,\n        clicked: listboxClicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), trackDetail && /*#__PURE__*/_jsxDEV(TrackInfo, { ...trackDetail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"de/AjB79spiAoXQpRbXgUlGH064=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/emilymarinaro/Documents/UCLA /projects/spotify_for_funsies/client/src/App.js"],"names":["React","useState","useEffect","Dropdown","TrackListContainer","TrackInfo","axios","App","clientSecret","clientId","token","setToken","genres","setGenres","selectedGenre","listOfGenresFromAPI","playlist","setPlaylist","selectedPlaylist","listOfPlaylistFromAPI","tracks","setTracks","selectedTrack","listOfTracksFromAPI","trackDetail","setTrackDetail","headers","Authorization","btoa","data","method","then","tokenResponse","console","log","access_token","genreResponse","categories","items","genreChanged","val","playlistResponse","playlists","playlistChanged","selectedPlayList","buttonClicked","e","preventDefault","tracksResponse","listboxClicked","currentTracks","trackInfo","filter","t","track","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Dropdown from './components/Dropdown/dropdown';\nimport TrackListContainer from './components/TrackListContainer/trackListContainer';\nimport TrackInfo from './components/TrackInfo/trackinfo';\nimport axios from 'axios';\nimport './App.css';\n//const { REACT_APP_CLIENT_SEC, REACT_APP_CLIENT_ID } = process.env;\n\nfunction App() {\n  // const data = [\n  //   { value: 1, name: 'A' },\n  //   { value: 2, name: 'B' },\n  //   { value: 3, name: 'C' },\n  // ];\n  const clientSecret = 'f08b7f2916e0478596e57ec0f16f4b0a';\n  const clientId = 'f9b121e7380a482f966c1dbb273db9e3';\n  const [token, setToken] = useState('');\n  const [genres, setGenres] = useState({\n    selectedGenre: '',\n    listOfGenresFromAPI: [],\n  });\n  const [playlist, setPlaylist] = useState({\n    selectedPlaylist: '',\n    listOfPlaylistFromAPI: [],\n  });\n  const [tracks, setTracks] = useState({\n    selectedTrack: '',\n    listOfTracksFromAPI: [],\n  });\n\n  const [trackDetail, setTrackDetail] = useState(null);\n\n  useEffect(() => {\n    //get initial token in order to access endpoints\n    axios('https://accounts.spotify.com/api/token', {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: 'Basic ' + btoa(clientId + ':' + clientSecret),\n      },\n      data: 'grant_type=client_credentials',\n      method: 'POST',\n    }).then((tokenResponse) => {\n      console.log(tokenResponse.data.access_token);\n      setToken(tokenResponse.data.access_token);\n      //get genres\n      axios('https://api.spotify.com/v1/browse/categories?locale=sv_US', {\n        method: 'GET',\n        headers: { Authorization: 'Bearer ' + tokenResponse.data.access_token },\n      }).then((genreResponse) => {\n        setGenres({\n          selectedGenre: genres.selectedGenre,\n          listOfGenresFromAPI: genreResponse.data.categories.items,\n        });\n      });\n    });\n  }, [genres.selectedGenre, clientId, clientSecret]);\n\n  const genreChanged = (val) => {\n    setGenres({\n      selectedGenre: val,\n      listOfGenresFromAPI: genres.listOfGenresFromAPI,\n    });\n\n    //get playlists\n    axios(\n      `https://api.spotify.com/v1/browse/categories/${val}/playlists?limit=10`,\n      {\n        method: 'GET',\n        headers: { Authorization: 'Bearer ' + token },\n      }\n    ).then((playlistResponse) => {\n      setPlaylist({\n        selectedPlaylist: playlist.selectedPlaylist,\n        listOfPlaylistFromAPI: playlistResponse.data.playlists.items,\n      });\n    });\n  };\n\n  const playlistChanged = (val) => {\n    setPlaylist({\n      selectedPlayList: val,\n      listOfPlaylistFromAPI: playlist.listOfPlaylistFromAPI,\n    });\n  };\n\n  const buttonClicked = (e) => {\n    e.preventDefault();\n\n    axios(\n      `https://api.spotify.com/v1/playlists/${playlist.selectedPlaylist}/tracks?limit=10`,\n      {\n        method: 'GET',\n        headers: {\n          Authorization: 'Bearer ' + token,\n        },\n      }\n    ).then((tracksResponse) => {\n      setTracks({\n        selectedTrack: tracks.selectedTrack,\n        listOfTracksFromAPI: tracksResponse.data.items,\n      });\n    });\n  };\n\n  const listboxClicked = (val) => {\n    const currentTracks = [...tracks.listOfTracksFromAPI];\n\n    const trackInfo = currentTracks.filter((t) => t.track.id === val);\n\n    setTrackDetail(trackInfo[0].track);\n  };\n\n  return (\n    <div className='App'>\n      <form onSubmit={buttonClicked}>\n        <Dropdown\n          options={genres.listOfGenresFromAPI}\n          selectedValue={genres.selectedGenre}\n          changed={genreChanged}\n        />\n        <Dropdown\n          options={playlist.listOfPlaylistFromAPI}\n          selectedValue={playlist.selectedPlaylist}\n          changed={playlistChanged}\n        />\n        <button type='submit'>Search</button>\n        <TrackListContainer\n          items={tracks.listOfTracksFromAPI}\n          clicked={listboxClicked}\n        />\n        {trackDetail && <TrackInfo {...trackDetail} />}\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}